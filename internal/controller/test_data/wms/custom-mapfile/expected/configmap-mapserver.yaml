---
apiVersion: v1
data:
  default_mapserver.conf: |-
    CONFIG
      ENV
        MS_MAP_NO_PATH "true"
      END
      MAPS
        MAP "/srv/data/config/mapfile/service.map"
      END
    END
  include.conf: >-
    server.modules += ( "mod_status" )


    $HTTP["remoteip"] =~ "^(127\.0\.0\.1|172\.(1[6-9]|2[0-9]|3[01])\.|10\.|192\.168\.)" {
        status.status-url = "/server-status"
    }


    url.rewrite-once = (
      "/datasetOwner/dataset/wms/v1_0/legend(.*)" => "/legend$1",
      "/datasetOwner/dataset/wms/v1_0(.*)" => "/mapserver$1"
    )


    magnet.attract-raw-url-to += ( "/srv/mapserver/config/ogc.lua" )


    setenv.add-environment += (
      "AZURE_STORAGE_CONNECTION_STRING"     => env.AZURE_STORAGE_CONNECTION_STRING,
    )
  ogc.lua: >-
    if lighty.r.req_attr["request.method"] == "GET" then

        -- obtain service type from environment
        serviceType = os.getenv('SERVICE_TYPE'):lower()

        path = lighty.r.req_attr["uri.path"]
        query = lighty.r.req_attr["uri.query"]

        -- handle legend requests
        if serviceType == "wms" then
            _, _, file = path:find(".*/legend/(.*)")
            if file then
                if file:find(".*%.png") then
                    local legendPath = "/var/www/legend/" .. file
                    local stat = lighty.stat(legendPath)
                    if (not stat or not stat.is_file) then
                        -- don't serve non existing legend file
                        return 404
                    end
                    lighty.content = { { filename = legendPath } }
                    lighty.header['Content-Type'] = "image/png"
                    return 200
                end

                return 404
            end
        end

        params = {}
        if query then
            for k, v in query:gmatch("([^?&=]+)=([^&]+)") do
                k = k:lower()

                params[k] = v
            end
        end

        -- assign service and version default values
        version = params['version']
        service = params['service']

        if not service then
            service = serviceType
        else
            service = service:lower()
        end

        if (service == 'wms' and (not version or version ~= '1.1.1')) then
            version = '1.3.0'
        end

        if (service == 'wfs' and (not version or (version ~= '1.0.0' and version ~= '1.1.0'))) then
            version = '2.0.0'
        end

        -- serve static content
        request = params['request']
        if request then
            request = request:lower()

            staticStatus = 200
            staticContentType = 'text/xml; charset=UTF-8'
            if request == 'getcapabilities' then
                if (service == 'wms' and version == '1.3.0') then
                    staticFile = '/var/www/config/capabilities_wms_130.xml'
                elseif (service == 'wfs' and version == '2.0.0') then
                    staticFile = '/var/www/config/capabilities_wfs_200.xml'
                end
            elseif service == 'wfs' and request == 'getfeature' then
                startindex = params['startindex']
                if startindex and tonumber(startindex) > 50000 then
                    staticFile = '/srv/mapserver/config/scraping-error.xml'
                    staticStatus = 400
                end
            end

            if staticFile then
                lighty.content = { { filename = staticFile } }
                lighty.header['Content-Type'] = staticContentType
                return staticStatus
            end
        end
    end
  scraping-error.xml: >-
    <?xml version="1.0" encoding="UTF-8"?>

    <ows:ExceptionReport xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:ows="http://www.opengis.net/ows/1.1" version="2.0.0" xml:lang="en-US" xsi:schemaLocation="http://www.opengis.net/ows/1.1 http://schemas.opengis.net/ows/1.1.0/owsExceptionReport.xsd">
        <ows:Exception exceptionCode="InvalidParameterValue" locator="typename">
            <ows:ExceptionText>
                It is not possible to use a 'startindex' higher than 50.000. When you need to scrape the WFS, please refer to the extracts or the ATOM downloads available for this dataset.
            </ows:ExceptionText>
        </ows:Exception>
    </ows:ExceptionReport>
immutable: true
kind: ConfigMap
metadata:
  labels:
    app: mapserver
    dataset: dataset
    dataset-owner: datasetOwner
    inspire: "false"
    service-type: wms
    service-version: v1_0
  name: custom-mapfile-wms-mapserver-thkgc6d66b
  namespace: default
  ownerReferences:
    - apiVersion: pdok.nl/v3
      kind: WMS
      name: custom-mapfile
      uid: ""
      blockOwnerDeletion: true
      controller: true
